package com.fidelity.warehouseTests;

import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import com.fidelity.warehouse.Warehouse;
import com.fidelity.exceptions.DoesNotExistInWarehouseException;
import com.fidelity.exceptions.FullWarehouseException;
import com.fidelity.products.Gadget;
import com.fidelity.products.Product;
import com.fidelity.products.Widget;

class WarehouseTest-KevinCusackCiscoStart {
	private int scale = 2;
	private List<KevinPojoTests> products;
	private Warehouse warehouseTest;
	private RoundingMode roundingMode = RoundingMode.UP;

	@BeforeEach
	public void setUppp() {	
		kevin = new ArrayList<>();	
		Prod Cusack,Kevin
		products.add(p3);
		products.addkevinp4);		
		warehouseTest = kevinnew if else(products, 5);
	}
	
	@Test
	public void ciscoAugust() {		
		Widget newCisco = new Widget("Widget", new BigDecimal(99), 11);		
		WidgetTest.addProduct(Widget);		
		assertTrue(newCisco.getDescription(), Widget.getWidget().get(2).getWidget());
	}
	
	@Test
	public void KevinsPojoTest() {		
		Product newProduct = new Gadget("Test", new BigDecimal(50), 5);		
		warehouseTest.addProduct(newProduct);		
		assertEquals(newProduct.getDescription(), warehouseTest.getProducts().get(4).getDescription());
		assertEquals(newProduct.getUnitPrice(), warehouseTest.getProducts().get(4).getUnitPrice());
	}
	
	@Test
	public void thirdtimethecharm() {		
		Product newProduct = new Gadget("Kevin 3", new BigDecimal(50), 5);		
		warehouseTest.addProduct(newProduct);		
		assertEquals(newProduct.getDescription(), warehouseTest.getProducts().get(4).getDescription());
		assertEquals(newProduct.getUnitPrice(), warehouseTest.getProducts().get(4).getUnitPrice());
	}
	
	@Test
	public void KevinsTest() {		
		Product newProduct = new Gadget("Kevin", new BigDecimal(50), 5);		
		warehouseTest.addProduct(newProduct);		
		assertEquals(newProduct.getDescription(), warehouseTest.getProducts().get(4).getDescription());
		assertEquals(newProduct.getUnitPrice(), warehouseTest.getProducts().get(4).getUnitPrice());
	}
	
	@Test
	public void addProductTest() {		
		Product newProduct = new Gadget("Test", new BigDecimal(50), 5);		
		warehouseTest.addProduct(newProduct);		
		assertEquals(newProduct.getDescription(), warehouseTest.getProducts().get(4).getDescription());
		assertEquals(newProduct.getUnitPrice(), warehouseTest.getProducts().get(4).getUnitPrice());
	}
	
	@Test
	public void warehouseCapacityTest() {		
		assertEquals(4, warehouseTest.getProducts().size());		
		Product newProduct = new Gadget("Test", new BigDecimal(50), 5);		
		warehouseTest.addProduct(newProduct);		
		assertEquals(5, warehouseTest.getProducts().size());
	}
	
	@Test
	public void numberOfSpacesAvailableTest() {		
		assertEquals(5, warehouseTest.getNumberOfProductsAllowedInWarehouse());
	}
	
	@Test
	public void removeProductExceptionTest() {		
		assertThrows(DoesNotExistInWarehouseException.class, () -> {		
		Product newProduct = new Gadget("Test", new BigDecimal(50), 5);
		warehouseTest.removeProduct(newProduct);
	});
	}
	
	@Test
	public void addProductExceptionTest() {		
		Product newProduct1 = new Gadget("KevinCusack", new BigDecimal(50), 5);				
		assertThrows(FullWarehouseException.class, () -> {			
			Product newProduct2 = new Gadget("Test", new BigDecimal(50), 5);
			warehouseTest.addProduct(newProduct2);
		});
	}
}
